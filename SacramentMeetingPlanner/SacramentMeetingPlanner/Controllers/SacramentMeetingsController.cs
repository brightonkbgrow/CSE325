using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using SacramentMeetingPlanner.Models;

namespace SacramentMeetingPlanner.Controllers
{
    public class SacramentMeetingsController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<SacramentMeetingsController> _logger;

        // Constructor with Dependency Injection for ApplicationDbContext and ILogger
        public SacramentMeetingsController(ApplicationDbContext context, ILogger<SacramentMeetingsController> logger)
        {
            _context = context;
            _logger = logger;
        }

        // GET: SacramentMeetings
        public async Task<IActionResult> Index()
        {
            var sacramentMeetings = await _context.SacramentMeetings.ToListAsync();
            return View(sacramentMeetings);
        }

        // GET: SacramentMeetings/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var sacramentMeeting = await _context.SacramentMeetings
                .FirstOrDefaultAsync(m => m.Id == id);
            if (sacramentMeeting == null)
            {
                return NotFound();
            }

            return View(sacramentMeeting);
        }

        // GET: SacramentMeetings/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: SacramentMeetings/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,MeetingDate,ConductingLeader,OpeningSong,SacramentHymn,ClosingSong,OpeningPrayer,ClosingPrayer, Speakers")] SacramentMeeting sacramentMeeting)
        {
            // Log any model validation errors
            if (!ModelState.IsValid)
            {
                foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                {
                    Console.WriteLine("Validation error: " + error.ErrorMessage);
                }
                return View(sacramentMeeting); // Return the view with the current model to show validation errors
            }

            try
            {
                // Ensure that each speaker has no manually assigned Id.
                foreach (var speaker in sacramentMeeting.Speakers)
                {
                    // Do not set the speaker's Id manually
                    speaker.Id = 0; // This ensures that the ID will be automatically generated by the database
                }

                // Add the new sacrament meeting to the context and save it to the database
                _context.Add(sacramentMeeting);
                await _context.SaveChangesAsync();

                // Log the number of sacrament meetings in the database after save
                var meetingCount = await _context.SacramentMeetings.CountAsync();
                Console.WriteLine($"Number of sacrament meetings in DB: {meetingCount}");

                // Redirect to the Index view after successfully saving
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error saving data: " + ex.Message);
                return View(sacramentMeeting); // Return the view in case of an error
            }
        }

        // GET: SacramentMeetings/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var sacramentMeeting = await _context.SacramentMeetings
                                                 .Include(sm => sm.Speakers) // Include Speakers to allow editing
                                                 .FirstOrDefaultAsync(m => m.Id == id);

            if (sacramentMeeting == null)
            {
                return NotFound();
            }

            return View(sacramentMeeting);
        }


        // POST: SacramentMeetings/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,MeetingDate,ConductingLeader,OpeningSong,SacramentHymn,ClosingSong,OpeningPrayer,ClosingPrayer,Speakers")] SacramentMeeting sacramentMeeting)
        {
            if (id != sacramentMeeting.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    // Ensure that the speakers have no manually assigned Id (auto-incremented by the database).
                    foreach (var speaker in sacramentMeeting.Speakers)
                    {
                        speaker.Id = 0; // This ensures that the ID will be automatically generated by the database
                    }

                    // Update the sacrament meeting
                    _context.Update(sacramentMeeting);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!SacramentMeetingExists(sacramentMeeting.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }

                return RedirectToAction(nameof(Index));
            }
            return View(sacramentMeeting);
        }


        // GET: SacramentMeetings/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var sacramentMeeting = await _context.SacramentMeetings
                .FirstOrDefaultAsync(m => m.Id == id);
            if (sacramentMeeting == null)
            {
                return NotFound();
            }

            return View(sacramentMeeting);
        }

        // POST: SacramentMeetings/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var sacramentMeeting = await _context.SacramentMeetings.FindAsync(id);
            if (sacramentMeeting != null)
            {
                _context.SacramentMeetings.Remove(sacramentMeeting);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        // Check if sacrament meeting exists
        private bool SacramentMeetingExists(int id)
        {
            return _context.SacramentMeetings.Any(e => e.Id == id);
        }
    }
}
